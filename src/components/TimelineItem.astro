---
const { startDate, endDate, title, description, link, company, highlights } =
  Astro.props;

const formatDate = (date: string | number | Date) =>
  date
    ? new Date(date).toLocaleDateString("en-US", {
        month: "short",
        year: "numeric",
      })
    : "Present";

const startDateFormated = formatDate(startDate);
const endDateFormated = formatDate(endDate);
const dateRange = `${startDateFormated} - ${endDateFormated}`;
const numElements = 2;
---

<li class="mb-10 ms-4">
  <div
    class="absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -start-1.5 border border-white dark:border-gray-900 dark:bg-gray-700"
  >
  </div>
  <time
    class="mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500"
    >{dateRange}</time
  >
  <h2 class="text-lg font-semibold text-gray-800 dark:text-gray-200">
    {title}
    {
      link && company && (
        <>
          @
          <a
            href={link}
            target="_blank"
            rel="noopener noreferrer"
            class="underline hover:text-blue-700 dark:text-gray-400 dark:hover:text-white"
          >
            {company}
          </a>
        </>
      )
    }
  </h2>
  {
    description && (
      <p class="mb-4 text-sm font-normal text-gray-500 dark:text-gray-400">
        {description}
      </p>
    )
  }
  {
    highlights && (
      <>
        <ol
          id="highlight-list"
          class="list-none list-inside pt-2 mb-2 text-sm font-normal text-gray-500 dark:text-gray-400"
        >
          {highlights.slice(0, numElements).map((highlight: any) => (
            <li class="mb-2 text-sm font-normal text-gray-500 dark:text-gray-400">
              - {highlight}
            </li>
          ))}
          {highlights.length > numElements && (
            <>
              {highlights.slice(numElements).map((highlight: any) => (
                <li
                  data-show-more
                  class="hidden mb-2 text-sm font-normal text-gray-500 dark:text-gray-400"
                >
                  - {highlight}
                </li>
              ))}
            </>
          )}
        </ol>
        {highlights.length > numElements && (
          <button
            id="toggle-button"
            class="toggle-button underline text-sm hover:text-blue-700 text-gray-600  dark:text-gray-400 dark:hover:text-white"
          >
            Show more
          </button>
        )}
      </>
    )
  }
</li>

<script>
  window.addEventListener("DOMContentLoaded", (event) => {
    const buttons = document.querySelectorAll(".toggle-button");

    buttons.forEach((button) => {
      const list = button.previousElementSibling;
      const listItems = list.querySelectorAll("[data-show-more]");

      button.addEventListener("click", () => {
        const isShowingMore = button.textContent.includes("less");

        listItems.forEach((item) => {
          item.classList.toggle("hidden");
        });

        button.textContent = isShowingMore ? "Show more" : "Show less";
      });
    });
  });
</script>
